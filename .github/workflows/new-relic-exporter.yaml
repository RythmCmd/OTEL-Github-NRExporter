name: Change Tracking Marker
on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  newrelic:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Resolve New Relic Entity GUID by Tag
        id: resolve
        env:
          NEW_RELIC_API_KEY: ${{ secrets.NEW_RELIC_API_KEY }}
          REPO:                ${{ github.repository }}
        run: |
          # Build GraphQL payload to find the entity tagged "repo=<org>/<repo>"
          PAYLOAD="{\"query\":\"{ actor { entitySearch(queryBuilder:{tags:{value:\\\"${REPO}\\\",key:\\\"repo\\\"}}){results{entities{guid}}}}}\"}"
          # Call NerdGraph and extract the GUID
          GUID=$(curl -s -X POST https://api.eu.newrelic.com/graphql \
            -H "Content-Type: application/json" \
            -H "API-Key: $NEW_RELIC_API_KEY" \
            -d "$PAYLOAD" \
          | jq -r '.data.actor.entitySearch.results.entities[0].guid')
          echo "ENTITY_GUID=$GUID" >> $GITHUB_ENV

      - name: Set Release Version
        run: |
          echo "RELEASE_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Send Change Tracking Deployment Event
        if: always()    # run on success, failure, or cancellation
        env:
          NEW_RELIC_API_KEY: ${{ secrets.NEW_RELIC_API_KEY }}
          ENTITY_GUID:      ${{ env.ENTITY_GUID }}
          GITHUB_ACTOR:     ${{ github.actor }}
        run: |
          # Send Change Tracking Deployment mutation
          curl https://api.eu.newrelic.com/graphql \
            -H 'Content-Type: application/json' \
            -H "API-Key: $NEW_RELIC_API_KEY" \
            --data-binary '{"query":"mutation {\n  changeTrackingCreateDeployment(\n    deployment: {version: \"1.0\", deploymentType: BASIC, entityGuid: \"'$ENTITY_GUID'\", user: \"'$GITHUB_ACTOR'\", description: \"ROLLING\"}\n  ) { user version }\n}", "variables":""}'
